
/**
 * üîç What is an Iterator in JavaScript?
 * ----------------------------------------
 * An **iterator** is an object that allows sequential access to elements in a collection, 
 * one at a time, without exposing the underlying structure.
 *
 * ‚úÖ It follows the **Iterator Protocol**, which requires:
 *    1Ô∏è‚É£ A `.next()` method that returns an object `{ value, done }`.
 *    2Ô∏è‚É£ `value`: The next value in the sequence.
 *    3Ô∏è‚É£ `done`: A boolean (`true` when iteration is complete).
 *
 * JavaScript provides built-in iterators for structures like:
 * - Arrays
 * - Strings
 * - Maps and Sets
 * - NodeLists
 *
 * Now, let‚Äôs see an example where we implement a **custom iterator**.
 */

// üìå Custom Iterator Function (Manually Implementing an Iterator)
function fetchNextElement(array) {
    let idx = 0; // Stores the current position in the array

    function next() {
        // If iteration is complete, return undefined
        if (idx == array.length) return { value: undefined, done: true };

        // Otherwise, fetch the next element and increment idx
        const nextElement = array[idx++];
        return { value: nextElement, done: false };
    }

    return { next }; // Returning an object that has `next()` method
}

// üõ†Ô∏è Using the Iterator
const automaticFetcher = fetchNextElement([99, 11, 12, 13, 0, 1, 2, 3, 4]);

console.log(automaticFetcher.next()); // { value: 99, done: false }
console.log(automaticFetcher.next()); // { value: 11, done: false }
console.log(automaticFetcher.next()); // { value: 12, done: false }
console.log(automaticFetcher.next()); // { value: 13, done: false }
console.log(automaticFetcher.next()); // { value: 0, done: false }

/**
 * üßê How `fetchNextElement` Works Step-by-Step:
 * --------------------------------------------
 * 1Ô∏è‚É£ `fetchNextElement([99, 11, 12, 13, 0, 1, 2, 3, 4])` is called.
 * 2Ô∏è‚É£ It initializes `idx = 0` and returns an object `{ next }`.
 * 3Ô∏è‚É£ When `.next()` is called:
 *     - If `idx < array.length`, it returns `{ value: array[idx++], done: false }`.
 *     - If `idx == array.length`, it returns `{ value: undefined, done: true }`.
 * 4Ô∏è‚É£ Once all elements are accessed, `done: true` indicates completion.
 */

/**
 * ‚úÖ Key Features of Iterators:
 * -----------------------------
 * ‚úî **Stateful** ‚Üí The iterator maintains an internal state (`idx`) to track progress.
 * ‚úî **Lazy Evaluation** ‚Üí Values are produced **one by one** instead of all at once.
 * ‚úî **Custom Iteration** ‚Üí We control how elements are accessed.
 * ‚úî **Avoids Memory Overhead** ‚Üí Useful for large data sets.
 *
 * üî• Built-in JavaScript Iterators:
 * ---------------------------------
 * JavaScript provides **built-in iterators** for:
 * 1Ô∏è‚É£ Arrays: `.entries()`, `.keys()`, `.values()`
 * 2Ô∏è‚É£ Strings: Iterated by characters (`for...of`)
 * 3Ô∏è‚É£ Maps and Sets: `.entries()`, `.keys()`, `.values()`
 */

// üîπ Using Built-in Array Iterator:
const arr = [10, 20, 30, 40];
const iterator = arr[Symbol.iterator]();

console.log(iterator.next()); // { value: 10, done: false }
console.log(iterator.next()); // { value: 20, done: false }
console.log(iterator.next()); // { value: 30, done: false }
console.log(iterator.next()); // { value: 40, done: false }
console.log(iterator.next()); // { value: undefined, done: true }